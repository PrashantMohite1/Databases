    

create database [dbname]
drop database [dbname]
use [dbname]


-- create table
create table [tablename] ( col1 coltype(size) extra);

--describe the table
desc [tablename]


--modify column 

alter table [tablename] modify [colname] [newDataype]

-- to rename column 

alter table [tablename] rename column old-col-name new-col-name



--to insert in tables

insert into tablename (col1,col2) values(val1,val2....);
or insert into tablename values(val1,val2,val3);            note- if you know sequence of values then use this



-- to update 
update tablename set col="" where id="";

--delete
delete from [tablename] where col="";



----------select queries 

select * from tablename where conditin

select * from tablename cond1 and cond2 

select * from tablename cond1 or cond2 

--not condition 

select * from tablename where not condition



------order by - use to sort the rows asc and dsc 

select * from tablename order by colname;    to get asc order 

select * from table order by colname desc;

----------count from 

select count(column) from tableName where condition 

select sum(column) "alias" tableName where condition


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



--length

    select colname , LENGTH(colname) "alias" from table;

-- concat

    select colname, concat(col1, "--->" , col2) from tablename;

-- Lcase(str)   to print in lowercase

--ucase(str)    to print in uppercase


--substring      to extract specified string
    
    SUBSTRING(string, start, length)       ex- select substring("prashant",1,4)


--string compare :- STRCMP(string1, string2)  - compare two string
    
    if string1 = string 2, this function returns  0
    if string1 < string 2, this function return -1 
    if string1 > string2 , this function return 



--if(cond,true,false)

  ex- select name,salary, if(salary< 5000 , "fresher" , "experince") "experince" from employee;


--in
   
    select * from tableName where column in(" " , " " , " ");

    select * from employee where id in(1,2,,5);




-- like 'pattern'             for finding pattern in seach 

    % = is like astrics *

    _ = zero charactor or 1 character

    select * from tableName col like 'a%';         prints data whose col start with a 
    
    select * from employee where name like '%te';




contraints - SQL constraints are used to specify rules for the data in a table.
constraints in sql  - not null , unique , primary key , foreign key , check ,defualt , create index


foreign key :- Prevents actions that would destroy links between tables , used to create a link between tables via primary key
    
    while creating table 

    create table tablename (col datatype other) foreign key (col) reference from parentable(primaryKey);


    after table creation

    alter table tablename add foreign keyc (sid) references parentTable(PrimaryKey);
    
    ex - alter table laptops add foreign key(sid) references employee(id);


JOIN :- used when we want to fetch data from multiple tables;


simple join - 
    
    select e.name , e.salary , l.model from employee e , laptops l where e.id = l.sid;



Inner join 

    select e.name , e.salary , l.model from employee e inner join laptops l on e.id = l.sid;


   joining 3 tables 

    select u.userid , u.username , o.orgid , o.orgname, r.filename  from "user" u inner join org o ON u.orgid = o.orgid  
    inner join resource r ON r.ownerid=u.userid where userid =92 ;




























=======================================================================================================================================================================================================================================
     THEORY 
========================================================================================================================================================================================================================================


SQL Constraints
SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

The following constraints are commonly used in SQL:

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly


SQL JOINS 

A JOIN clause is used to combine rows from two or more tables, based on a related column between them.


Different Types of SQL JOINs
Here are the different types of the JOINs in SQL:

(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table





















